/* Find the exsit constraints name */
SELECT CONSTRAINT_NAME FROM USER_CONSTRAINTS;

/* Task1 set constraints */
ALTER TABLE ACTOR ADD CONSTRAINT PK_ACTORID PRIMARY KEY (actor_id);
ALTER TABLE category ADD CONSTRAINT PK_CATEGORYID PRIMARY KEY (category_id);
ALTER TABLE ACTOR MODIFY first_name CONSTRAINT CK_FNAME NOT NULL;
ALTER TABLE ACTOR MODIFY last_name CONSTRAINT CK_LNAME NOT NULL;
ALTER TABLE FILM MODIFY title CONSTRAINT CK_TILE NOT NULL;
ALTER TABLE CATEGORY  MODIFY name CONSTRAINT CK_CATANAME NOT NULL;
ALTER TABLE FILM  MODIFY rental_rate CONSTRAINT CK_RENTALRATE NOT NULL;
ALTER TABLE FILM ADD CONSTRAINT CK_RATING CHECK ((rating = 'G') OR (rating = 'PG') OR (rating = 'PG-13') OR (rating = 'R') OR (rating = 'NC-17'));
ALTER TABLE FILM ADD CONSTRAINT CK_SPLFEATURES CHECK ((special_features = 'Trailers') OR (special_features IS NULL) OR (special_features = 'Commentaries') OR (special_features = 'Deleted Scenes') OR (special_features = 'Behind the Scenes'));
ALTER TABLE FILM ADD CONSTRAINT FK_LANGUAGE FOREIGN KEY (language_id) REFERENCES language (language_id);
ALTER TABLE FILM ADD CONSTRAINT FK_ORLANGUAGEID FOREIGN KEY (original_language_id ) REFERENCES language (language_id);
ALTER TABLE FILM_ACTOR ADD CONSTRAINT FK_ACTORID FOREIGN KEY (ACTOR_ID) REFERENCES ACTOR (ACTOR_ID);
ALTER TABLE FILM ADD CONSTRAINT CK_RELEASEYR CHECK (RELEASE_YEAR <= 2018);

/* Task2.1 triggers */
CREATE SEQUENCE "FILM_ID_SEQ" MINVALUE 2020 INCREMENT BY 2 START WITH 22000;
CREATE OR REPLACE TRIGGER "BI_FILM_ID"
  BEFORE INSERT ON "FILM"
  FOR EACH ROW
BEGIN
    SELECT "FILM_ID_SEQ".nextval INTO :NEW.FILM_ID FROM DUAL;
END;
  /
SHOW ERRORS;

/* Task2.2 triggers */
CREATE OR REPLACE TRIGGER "BI_FILM_LANG"
 BEFORE INSERT ON "FILM"
 FOR EACH ROW
 DECLARE
   OL_NAME VARCHAR2(20);
   NL_NAME VARCHAR2(20);
   N_DES VARCHAR(295);
 BEGIN
   IF ((:NEW.original_language_id IS NOT NULL) AND (:NEW.language_id IS NOT NULL)) THEN
     SELECT name INTO OL_NAME FROM LANGUAGE WHERE language_id = :NEW.original_language_id;
     SELECT name INTO NL_NAME FROM LANGUAGE WHERE language_id = :NEW.language_id;
     SELECT CONCAT(CONCAT(CONCAT('Originally in ', OL_NAME), '. Re-released in '), NL_NAME) INTO N_DES FROM DUAL;
     :NEW.description := CONCAT(:NEW.description, N_DES);
   END IF;
 end;
 /
SHOW ERRORS;

/* Task3.1 view */
SELECT title, length
FROM FILM
WHERE film_id IN (
SELECT film_id FROM FILM_CATEGORY WHERE category_id IN (
SELECT category_id 
FROM CATEGORY
WHERE name = 'Comedy')) 
AND LENGTH = (SELECT MAX(length) FROM FILM
		WHERE film_id IN (SELECT film_id
FROM FILM_CATEGORY WHERE category_id IN (
SELECT category_id 
FROM CATEGORY
WHERE name = 'Comedy')));

/* Task3.2 view */
CREATE OR REPLACE VIEW MAX_COMEDY_ACTORS AS
SELECT * FROM ACTOR
  	WHERE actor_id IN (SELECT actor_id
FROM FILM_ACTOR
   		WHERE film_id IN (SELECT film_id
FROM FILM
WHERE film_id IN (
SELECT film_id FROM FILM_CATEGORY WHERE category_id IN (
SELECT category_id FROM CATEGORY WHERE name = 'Comedy'))
AND LENGTH = (SELECT MAX(length) FROM FILM
WHERE film_id IN (SELECT film_id
FROM FILM_CATEGORY WHERE category_id IN (
SELECT category_id FROM CATEGORY WHERE name = 'Comedy')))));

/* Task3.3 view */
CREATE OR REPLACE VIEW V_COMEDY_ACTORS_2008 AS
SELECT first_name, last_name FROM ACTOR WHERE ACTOR_ID IN (SELECT DISTINCT ACTOR_ID
                                                          FROM FILM_ACTOR WHERE film_id IN (SELECT FILM_ID FROM FILM
                  WHERE (release_year = 2008)
                  AND FILM_ID IN (SELECT film_id FROM FILM_CATEGORY WHERE category_id IN (
SELECT category_id
FROM CATEGORY
WHERE name = 'Comedy'))));

/* Task3.4 view */
CREATE MATERIALIZED VIEW MV_COMEDY_ACTORS_2008
BUILD IMMEDIATE
AS
SELECT first_name, last_name FROM ACTOR WHERE ACTOR_ID IN (SELECT DISTINCT ACTOR_ID
                                                          FROM FILM_ACTOR WHERE film_id IN (SELECT FILM_ID FROM FILM
                  WHERE (release_year = 2008)
                  AND FILM_ID IN (
SELECT film_id FROM FILM_CATEGORY WHERE category_id IN (
SELECT category_id
FROM CATEGORY
WHERE name = 'Comedy'))));

/* Task4.1 Index */
SELECT title FROM (SELECT TITLE FROM FILM
WHERE (INSTR(SUBSTR(description, INSTR(description, 'in ')), 'Boat') != 0)
ORDER BY title ASC)
WHERE ROWNUM <= 200;

/* Task4.2 index */
CREATE INDEX IDX_SEARCH_LOCATION ON FILM(INSTR(SUBSTR(description, INSTR(description, 'in ')), 'Boat'));
SELECT title FROM (SELECT TITLE FROM FILM
WHERE (INSTR(SUBSTR(description, INSTR(description, 'in ')), 'Boat') != 0)
ORDER BY title ASC)
WHERE ROWNUM <= 200;

/* Task 5.1 execution Plan */
EXPLAIN PLAN FOR SELECT /*+RULE*/ * FROM FILM WHERE FILM_ID > 1000;
SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);

/* Task 5.2 execution plan */
EXPLAIN PLAN FOR SELECT * FROM FILM WHERE FILM_ID > 1000;
SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);

/* Task 5.3 execution plan */
EXPLAIN PLAN FOR SELECT * FROM FILM WHERE FILM_ID = 1000;
SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);

/* Task 5.6.a */
ANALYZE INDEX PK_FILMID VALIDATE STRUCTURE;
SELECT HEIGHT FROM INDEX_STATS;

/* Task 5.6.b */
ANALYZE INDEX PK_FILMID VALIDATE STRUCTURE;
SELECT LF_BLKS FROM INDEX_STATS;
